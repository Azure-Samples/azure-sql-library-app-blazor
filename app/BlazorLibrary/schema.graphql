schema {
  query: Query
  mutation: Mutation
}

enum OrderBy {
  ASC
  DESC
}

input DefaultValue {
  Byte: Byte
  Short: Short
  Int: Int
  Long: Long
  String: String
  Boolean: Boolean
  Single: Single
  Float: Float
  Decimal: Decimal
  DateTime: DateTime
  ByteArray: ByteArray
  LocalTime: LocalTime
}

type Author {
  id: Int!
  first_name: String!
  middle_name: String
  last_name: String!
  books("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: BookFilterInput "Ordering options for query" orderBy: BookOrderByInput): BookConnection!
}

type Book {
  id: Int!
  title: String!
  year: Int
  pages: Int
  authors("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: AuthorFilterInput "Ordering options for query" orderBy: AuthorOrderByInput): AuthorConnection!
}

type BookAuthor {
  author_id: Int!
  book_id: Int!
}

"Order by input for Author GraphQL type"
input AuthorOrderByInput {
  "Order by options for id"
  id: OrderBy
  "Order by options for first_name"
  first_name: OrderBy
  "Order by options for middle_name"
  middle_name: OrderBy
  "Order by options for last_name"
  last_name: OrderBy
  "Order by options for books"
  books: BookOrderByInput
  "Conditions to be treated as AND operations"
  and: [AuthorOrderByInput]
  "Conditions to be treated as OR operations"
  or: [AuthorOrderByInput]
}

"Input type for adding Int filters"
input IntFilterInput {
  "Equals"
  eq: Int
  "Greater Than"
  gt: Int
  "Greater Than or Equal To"
  gte: Int
  "Less Than"
  lt: Int
  "Less Than or Equal To"
  lte: Int
  "Not Equals"
  neq: Int
  "Not null test"
  isNull: Boolean
}

"Input type for adding String filters"
input StringFilterInput {
  "Equals"
  eq: String
  "Contains"
  contains: String
  "Not Contains"
  notContains: String
  "Starts With"
  startsWith: String
  "Ends With"
  endsWith: String
  "Not Equals"
  neq: String
  "Case Insensitive"
  caseInsensitive: Boolean = false
  "Is null test"
  isNull: Boolean
}

"Filter input for Author GraphQL type"
input AuthorFilterInput {
  "Filter options for id"
  id: IntFilterInput
  "Filter options for first_name"
  first_name: StringFilterInput
  "Filter options for middle_name"
  middle_name: StringFilterInput
  "Filter options for last_name"
  last_name: StringFilterInput
  "Filter options for books"
  books: BookFilterInput
  "Conditions to be treated as AND operations"
  and: [AuthorFilterInput]
  "Conditions to be treated as OR operations"
  or: [AuthorFilterInput]
}

"Order by input for Book GraphQL type"
input BookOrderByInput {
  "Order by options for id"
  id: OrderBy
  "Order by options for title"
  title: OrderBy
  "Order by options for year"
  year: OrderBy
  "Order by options for pages"
  pages: OrderBy
  "Order by options for authors"
  authors: AuthorOrderByInput
  "Conditions to be treated as AND operations"
  and: [BookOrderByInput]
  "Conditions to be treated as OR operations"
  or: [BookOrderByInput]
}

"Filter input for Book GraphQL type"
input BookFilterInput {
  "Filter options for id"
  id: IntFilterInput
  "Filter options for title"
  title: StringFilterInput
  "Filter options for year"
  year: IntFilterInput
  "Filter options for pages"
  pages: IntFilterInput
  "Filter options for authors"
  authors: AuthorFilterInput
  "Conditions to be treated as AND operations"
  and: [BookFilterInput]
  "Conditions to be treated as OR operations"
  or: [BookFilterInput]
}

"Order by input for BookAuthor GraphQL type"
input BookAuthorOrderByInput {
  "Order by options for author_id"
  author_id: OrderBy
  "Order by options for book_id"
  book_id: OrderBy
  "Conditions to be treated as AND operations"
  and: [BookAuthorOrderByInput]
  "Conditions to be treated as OR operations"
  or: [BookAuthorOrderByInput]
}

"Filter input for BookAuthor GraphQL type"
input BookAuthorFilterInput {
  "Filter options for author_id"
  author_id: IntFilterInput
  "Filter options for book_id"
  book_id: IntFilterInput
  "Conditions to be treated as AND operations"
  and: [BookAuthorFilterInput]
  "Conditions to be treated as OR operations"
  or: [BookAuthorFilterInput]
}

type Query {
  "Get a list of all the Author items from the database"
  authors("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: AuthorFilterInput "Ordering options for query" orderBy: AuthorOrderByInput): AuthorConnection!
  "Get a Author from the database by its ID\/primary key"
  author_by_pk(id: Int!): Author
  "Get a list of all the Book items from the database"
  books("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: BookFilterInput "Ordering options for query" orderBy: BookOrderByInput): BookConnection!
  "Get a Book from the database by its ID\/primary key"
  book_by_pk(id: Int!): Book
  "Get a list of all the BookAuthor items from the database"
  bookAuthors("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: BookAuthorFilterInput "Ordering options for query" orderBy: BookAuthorOrderByInput): BookAuthorConnection!
  "Get a BookAuthor from the database by its ID\/primary key"
  bookAuthor_by_pk(author_id: Int! book_id: Int!): BookAuthor
}

"The return object from a filter query that supports a pagination token for paging through results"
type AuthorConnection {
  "The list of items that matched the filter"
  items: [Author!]!
  "A pagination token to provide to subsequent pages of a query"
  endCursor: String
  "Indicates if there are more pages of items to return"
  hasNextPage: Boolean!
}

"The return object from a filter query that supports a pagination token for paging through results"
type BookConnection {
  "The list of items that matched the filter"
  items: [Book!]!
  "A pagination token to provide to subsequent pages of a query"
  endCursor: String
  "Indicates if there are more pages of items to return"
  hasNextPage: Boolean!
}

"The return object from a filter query that supports a pagination token for paging through results"
type BookAuthorConnection {
  "The list of items that matched the filter"
  items: [BookAuthor!]!
  "A pagination token to provide to subsequent pages of a query"
  endCursor: String
  "Indicates if there are more pages of items to return"
  hasNextPage: Boolean!
}

type Mutation {
  "Creates a new Author"
  createAuthor("Input representing all the fields for creating Author" item: CreateAuthorInput!): Author
  "Updates a Author"
  updateAuthor("The ID of the item being updated." id: Int! "Input representing all the fields for updating Author" item: UpdateAuthorInput!): Author
  "Delete a Author"
  deleteAuthor("The ID of the item being deleted." id: Int!): Author
  "Creates a new Book"
  createBook("Input representing all the fields for creating Book" item: CreateBookInput!): Book
  "Updates a Book"
  updateBook("The ID of the item being updated." id: Int! "Input representing all the fields for updating Book" item: UpdateBookInput!): Book
  "Delete a Book"
  deleteBook("The ID of the item being deleted." id: Int!): Book
  "Creates a new BookAuthor"
  createBookAuthor("Input representing all the fields for creating BookAuthor" item: CreateBookAuthorInput!): BookAuthor
  "Updates a BookAuthor"
  updateBookAuthor("One of the ids of the item being updated." author_id: Int! "One of the ids of the item being updated." book_id: Int! "Input representing all the fields for updating BookAuthor" item: UpdateBookAuthorInput!): BookAuthor
  "Delete a BookAuthor"
  deleteBookAuthor("One of the ids of the item being deleted." author_id: Int! "One of the ids of the item being deleted." book_id: Int!): BookAuthor
}

"Input type for creating Author"
input CreateAuthorInput {
  "Input for field id on type CreateAuthorInput"
  id: Int = "(NEXT VALUE FOR [dbo].[globalId])"
  "Input for field first_name on type CreateAuthorInput"
  first_name: String!
  "Input for field middle_name on type CreateAuthorInput"
  middle_name: String
  "Input for field last_name on type CreateAuthorInput"
  last_name: String!
}

"Input type for updating Author"
input UpdateAuthorInput {
  "Input for field id on type UpdateAuthorInput"
  id: Int
  "Input for field first_name on type UpdateAuthorInput"
  first_name: String
  "Input for field middle_name on type UpdateAuthorInput"
  middle_name: String
  "Input for field last_name on type UpdateAuthorInput"
  last_name: String
}

"Input type for creating Book"
input CreateBookInput {
  "Input for field id on type CreateBookInput"
  id: Int = "(NEXT VALUE FOR [dbo].[globalId])"
  "Input for field title on type CreateBookInput"
  title: String!
  "Input for field year on type CreateBookInput"
  year: Int
  "Input for field pages on type CreateBookInput"
  pages: Int
}

"Input type for updating Book"
input UpdateBookInput {
  "Input for field id on type UpdateBookInput"
  id: Int
  "Input for field title on type UpdateBookInput"
  title: String
  "Input for field year on type UpdateBookInput"
  year: Int
  "Input for field pages on type UpdateBookInput"
  pages: Int
}

"Input type for creating BookAuthor"
input CreateBookAuthorInput {
  "Input for field author_id on type CreateBookAuthorInput"
  author_id: Int!
  "Input for field book_id on type CreateBookAuthorInput"
  book_id: Int!
}

"Input type for updating BookAuthor"
input UpdateBookAuthorInput {
  "Input for field author_id on type UpdateBookAuthorInput"
  author_id: Int
  "Input for field book_id on type UpdateBookAuthorInput"
  book_id: Int
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"IEEE 754 32 bit float"
scalar Single

"The built-in `Decimal` scalar type."
scalar Decimal

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

scalar ByteArray

"LocalTime is an immutable struct representing a time of day, with no reference to a particular calendar, time zone or date."
scalar LocalTime

"The `@oneOf` directive is used within the type system definition language\n to indicate:\n\n - an Input Object is a Oneof Input Object, or\n - an Object Type's Field is a Oneof Field."
directive @oneOf on INPUT_OBJECT

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

"A directive to indicate the type maps to a storable entity not a nested entity."
directive @model("Underlying name of the database entity." name: String) on OBJECT

"A directive to indicate the relationship between two tables"
directive @relationship("The name of the GraphQL type the relationship targets" target: String "The relationship cardinality" cardinality: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"A directive to indicate the primary key field of an item."
directive @primaryKey("The underlying database type." databaseType: String) on FIELD_DEFINITION

"The default value to be used when creating an item."
directive @defaultValue(value: DefaultValue) on FIELD_DEFINITION

"Indicates that a field is auto generated by the database."
directive @autoGenerated on FIELD_DEFINITION