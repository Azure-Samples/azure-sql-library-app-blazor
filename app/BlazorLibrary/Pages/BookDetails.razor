@page "/BookDetails/{id}"
@using BookManagementApp.Models
@using BookManagementApp.Services
@using System.Text.Json
@inject NavigationManager Navigation
@inject BookService bookService

    <PageTitle>Edit Book</PageTitle>
    <h3>Book details</h3>
    <p>Edit details for a existing book</p>

<div class="row">
    <EditForm Model="@book" OnValidSubmit="@HandleValidRequest" OnInvalidSubmit="@HandleFailedRequest">
        <div class="form-group">
            <label for="title" class="col-md-8">Title</label>
            <InputText class="col-md-8 form-control" @bind-Value="@book.Title" placeholder="Enter book title"/>
        </div>
        <div class="form-group">
            <label for="year" class="col-md-8">Year</label>
            <InputText class="col-md-8 form-control" @bind-Value="@book.Year" placeholder="Year published"/>
        </div>
        <div class="form-group">
            <label for="pages" class="col-md-8">Pages</label>
            <InputText class="col-md-8 form-control" @bind-Value="@book.Pages" placeholder="Number of pages"/>
        </div>

        <br/>
        <div class="form-group">
            <button type="submit" class="btn btn-success">Save book</button>
            <a @onclick="GoToBooks" class="btn btn-primary">Back to books</a>
            <a @onclick="@DeleteBook" class="btn btn-danger">Delete book</a>
        </div>
        <br/>
        <p style="color: red">@Message</p>
    </EditForm>
</div>

@code {

    protected string Message = string.Empty;
    protected BookModel book {get; set;} = new BookModel();
    protected Book bookResponse {get; set;} = new Book();

    [Parameter]
    public string? Id { get; set; }

    protected void HandleFailedRequest()
    {
        Message = "Invalid form data";
    }

    protected void GoToBooks()
    {
        Navigation.NavigateTo("/books");
    }

    protected async Task DeleteBook()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var bookId = Convert.ToInt32(Id);
            var result = await bookService.DeleteBookAsync(bookId);

            if (result)
            {
                Navigation.NavigateTo("/books");
            }
            else
            {
                Message = "Failed to delete book";
            }
        }
    }

    protected async override Task OnInitializedAsync()
    {
        bookResponse = await bookService.GetBookByIdAsync(int.Parse(Id));

        book.Title = bookResponse.Title;

        if (bookResponse.Year != null){
            book.Year = $"{bookResponse.Year}";
        }

        if (bookResponse.Pages != null){
            book.Pages = $"{bookResponse.Pages}";
        }
    }

    protected async void HandleValidRequest()
    {
        var newBook = new Book();

        newBook.Id = Convert.ToInt32(Id);

        newBook.Title = book.Title;

        if (book.Year != ""){
            newBook.Year = int.Parse(book.Year);
        }

        if (book.Pages != ""){
            newBook.Pages = int.Parse(book.Pages);
        }

        var result = await bookService.UpdateBookAsync(newBook);

        if (result)
            Navigation.NavigateTo("/books");
        else
            Message = "Failed to update book";
    }
}